# 面向过程编程
# 通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务
# 函数就是面向过程的程序设计的基本单元

# 函数式编程
# 虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算
# 纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的
# 类似于数学上的函数 f(x)
# python允许使用变量，所以不是纯粹的函数式编程

# 函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！
 
# 变量可以指向函数
from functools import reduce


f = abs
# 调用变量f()和abs()效果一样
f(-9)
# 其实函数名也是变量
# 可以修改指向，但不会怎么做

# 高阶函数
# 既然变量可以指向函数，一个函数又可以接收变量
# 意味着一个函数可以接收另一个函数作为参数
# 这类函数称作高阶函数
def add(x, y, f):
    return f(x) + f(y)

x, y = -5, -23
print(add(x, y, f))

# 小结
# 把函数作为参数传入，这样的函数称为高阶函数
# 函数式编程就是指这种高度抽象的编程范式

# map()函数
# map()函数接收两个参数，一个是函数，一个是Iterable
# map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回
def fn(x):
    return x * x
r = map(fn, [1, 2, 3, 4])
# map返回的是迭代器对象，需要用list函数把全部结果计算出来
list(r)

# reduce()函数
# reduce把一个函数作用在一个序列上
# 这个函数必须接收两个参数
# reduce把结果继续和序列的下一个元素做累积计算
def add(x, y):
    return x + y
reduce(add, [1, 2, 3, 4])

# filter()函数
# 也接收一个函数和一个序列
# filter()传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素
def is_odd(x):
    # filter()传入的函数返回值要是布尔值
    return x % 2 == 1
i = filter(is_odd, [1, 2, 3, 4])

# 可见用filter()这个高阶函数，关键在于正确实现一个“筛选”函数
# 注意到filter()函数返回的是一个Iterator，也就是一个惰性序列


# sorted()函数
# sorted()函数也是一个高阶函数，它接收一个key函数来实现自定义的排序
# 先对每个元素调用函数，再对结果排序
# 数值按升序，字符按ASCII码值
sorted([-1, -4, -6, 11, -99], key = abs)

# reverse=True 实现排序翻转
# sorted()也是一个高阶函数。用sorted()排序的关键在于实现一个映射函数
sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)

# 通过使用高阶函数，可以使代码非常简洁，抽象化程度高

